// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DbScraper02.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DbScraper02.Models
{
    public partial class Scraper02Context
    {
        private IScraper02ContextProcedures _procedures;

        public virtual IScraper02ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Scraper02ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IScraper02ContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Scraper02ContextProcedures : IScraper02ContextProcedures
    {
        private readonly Scraper02Context _context;

        public Scraper02ContextProcedures(Scraper02Context context)
        {
            _context = context;
        }

        public virtual async Task<int> linkAddSpAsync(int? pageId, int? indexOnPage, string host, string cleanLink, string fullLink, string rawLink, string innerHtml, string outerHtml, string errorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "indexOnPage",
                    Value = indexOnPage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "host",
                    Size = 100,
                    Value = host ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cleanLink",
                    Size = -1,
                    Value = cleanLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fullLink",
                    Size = -1,
                    Value = fullLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "rawLink",
                    Size = -1,
                    Value = rawLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "innerHtml",
                    Size = -1,
                    Value = innerHtml ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "outerHtml",
                    Size = -1,
                    Value = outerHtml ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "errorMessage",
                    Size = -1,
                    Value = errorMessage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[linkAddSp] @pageId = @pageId, @indexOnPage = @indexOnPage, @host = @host, @cleanLink = @cleanLink, @fullLink = @fullLink, @rawLink = @rawLink, @innerHtml = @innerHtml, @outerHtml = @outerHtml, @errorMessage = @errorMessage", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> linkDeleteForPageSpAsync(int? pageId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[linkDeleteForPageSp] @pageId = @pageId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> pageAddSpAsync(string host, string fullLink, string cleanLink, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "host",
                    Size = 100,
                    Value = host ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fullLink",
                    Size = -1,
                    Value = fullLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "cleanLink",
                    Size = -1,
                    Value = cleanLink ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[pageAddSp] @host = @host, @fullLink = @fullLink, @cleanLink = @cleanLink", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> pageUpdateLinkCountAsync(int? pageId, int? linkCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "linkCount",
                    Value = linkCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[pageUpdateLinkCount] @pageId = @pageId, @linkCount = @linkCount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> pageUpdateLinkCountOverLimitAsync(int? pageId, int? linkCount, int? linkCountOverLimit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pageId",
                    Value = pageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "linkCount",
                    Value = linkCount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "linkCountOverLimit",
                    Value = linkCountOverLimit ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[pageUpdateLinkCountOverLimit] @pageId = @pageId, @linkCount = @linkCount, @linkCountOverLimit = @linkCountOverLimit", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
