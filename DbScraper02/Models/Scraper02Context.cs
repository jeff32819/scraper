// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DbScraper02.Models;

public partial class Scraper02Context : DbContext
{
    public Scraper02Context(DbContextOptions<Scraper02Context> options)
        : base(options)
    {
    }

    public virtual DbSet<domainsToSkipAutoScrapeTbl> domainsToSkipAutoScrapeTbl { get; set; }

    public virtual DbSet<fileTypeAllowedToScrapeTbl> fileTypeAllowedToScrapeTbl { get; set; }

    public virtual DbSet<hostPageLinkErrorsQry> hostPageLinkErrorsQry { get; set; }

    public virtual DbSet<hostQry> hostQry { get; set; }

    public virtual DbSet<hostTbl> hostTbl { get; set; }

    public virtual DbSet<linkTbl> linkTbl { get; set; }

    public virtual DbSet<logTbl> logTbl { get; set; }

    public virtual DbSet<pageRuleTbl> pageRuleTbl { get; set; }

    public virtual DbSet<pageTbl> pageTbl { get; set; }

    public virtual DbSet<scrapeQueueQry> scrapeQueueQry { get; set; }

    public virtual DbSet<scrapeTbl> scrapeTbl { get; set; }

    public virtual DbSet<tmpHostTransferQry> tmpHostTransferQry { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<domainsToSkipAutoScrapeTbl>(entity =>
        {
            entity.HasKey(e => e.domainName);

            entity.Property(e => e.domainName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<fileTypeAllowedToScrapeTbl>(entity =>
        {
            entity.HasKey(e => e.fileExt).HasName("PK_fileTypeAllowedToScrape");

            entity.Property(e => e.fileExt)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<hostPageLinkErrorsQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hostPageLinkErrorsQry");

            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.innerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.linkCleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.outerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.pageCleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.rawLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.scrapeCleanLink)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<hostQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hostQry");

            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<hostTbl>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_hostPathToScrapeTbl");

            entity.HasIndex(e => e.host, "IX_hostTbl").IsUnique();

            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.category)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.errorMessage)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.maxPageToScrape).HasDefaultValue(-1);
            entity.Property(e => e.redirectedToHost)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<linkTbl>(entity =>
        {
            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.cleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.errorMessage).IsUnicode(false);
            entity.Property(e => e.fullLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.innerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.outerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.rawLink)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<logTbl>(entity =>
        {
            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.text)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<pageRuleTbl>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_scrapeRuleTbl");

            entity.Property(e => e.addedDateTime)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.cleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<pageTbl>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_pageTbl_1");

            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.cleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.fullLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.linkCount).HasDefaultValue(-1);
            entity.Property(e => e.linkCountOverLimit).HasDefaultValue(-1);
        });

        modelBuilder.Entity<scrapeQueueQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("scrapeQueueQry");

            entity.Property(e => e.cleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.contentHeaders).IsUnicode(false);
            entity.Property(e => e.contentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.errorMessage).IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.html).IsUnicode(false);
            entity.Property(e => e.responseHeaders).IsUnicode(false);
        });

        modelBuilder.Entity<scrapeTbl>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_pageTbl");

            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.cleanLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.contentHeaders).IsUnicode(false);
            entity.Property(e => e.contentType).IsUnicode(false);
            entity.Property(e => e.errorMessage).IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.html).IsUnicode(false);
            entity.Property(e => e.responseHeaders).IsUnicode(false);
            entity.Property(e => e.statusCode).HasDefaultValue(-1);
        });

        modelBuilder.Entity<tmpHostTransferQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("tmpHostTransferQry");

            entity.Property(e => e.category)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.id).ValueGeneratedOnAdd();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}