// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace ScraperCode.DbCtx;

public partial class WebScraperContext : DbContext
{
    public WebScraperContext(DbContextOptions<WebScraperContext> options)
        : base(options)
    {
    }

    public virtual DbSet<fileTypeAllowedToScrapeTbl> fileTypeAllowedToScrapeTbl { get; set; }

    public virtual DbSet<hostPageCountQry> hostPageCountQry { get; set; }

    public virtual DbSet<hostPageLinkErrorsQry> hostPageLinkErrorsQry { get; set; }

    public virtual DbSet<hostQry> hostQry { get; set; }

    public virtual DbSet<hostTbl> hostTbl { get; set; }

    public virtual DbSet<hostWithoutAnyPages> hostWithoutAnyPages { get; set; }

    public virtual DbSet<linkTbl> linkTbl { get; set; }

    public virtual DbSet<logTbl> logTbl { get; set; }

    public virtual DbSet<pageLinkQry> pageLinkQry { get; set; }

    public virtual DbSet<pageScrapeQry> pageScrapeQry { get; set; }

    public virtual DbSet<pageTbl> pageTbl { get; set; }

    public virtual DbSet<scapeLinksThatShouldBeInPages> scapeLinksThatShouldBeInPages { get; set; }

    public virtual DbSet<scrapeQueueQry> scrapeQueueQry { get; set; }

    public virtual DbSet<scrapeTbl> scrapeTbl { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<fileTypeAllowedToScrapeTbl>(entity =>
        {
            entity.HasKey(e => e.fileExt).HasName("PK_fileTypeAllowedToScrape");

            entity.Property(e => e.fileExt)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<hostPageCountQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hostPageCountQry");

            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.id).ValueGeneratedOnAdd();
            entity.Property(e => e.path)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.runNotes).IsUnicode(false);
        });

        modelBuilder.Entity<hostPageLinkErrorsQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hostPageLinkErrorsQry");

            entity.Property(e => e.errorText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.innerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.linkUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.outerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.pageUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.rawLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.scrapeUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.statusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<hostQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hostQry");

            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.id).ValueGeneratedOnAdd();
            entity.Property(e => e.path)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.runNotes).IsUnicode(false);
        });

        modelBuilder.Entity<hostTbl>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK_hostPathToScrapeTbl");

            entity.HasIndex(e => new { e.host, e.path }, "IX_hostPathToScrapeTbl").IsUnique();

            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.category)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValue("");
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.maxPageToScrape).HasDefaultValue(-1);
            entity.Property(e => e.path)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.redirectedToUrl).IsUnicode(false);
            entity.Property(e => e.runNotes).IsUnicode(false);
        });

        modelBuilder.Entity<hostWithoutAnyPages>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("hostWithoutAnyPages");

            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.id).ValueGeneratedOnAdd();
            entity.Property(e => e.path)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.runNotes).IsUnicode(false);
        });

        modelBuilder.Entity<linkTbl>(entity =>
        {
            entity.Property(e => e.absoluteUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.innerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.outerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.rawLink)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.skipReason)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.page).WithMany(p => p.linkTbl)
                .HasForeignKey(d => d.pageId)
                .HasConstraintName("FK_linkTbl_pageTbl");

            entity.HasOne(d => d.scrape).WithMany(p => p.linkTbl)
                .HasForeignKey(d => d.scrapeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_linkTbl_scrapeTbl");
        });

        modelBuilder.Entity<logTbl>(entity =>
        {
            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.text)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<pageLinkQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pageLinkQry");

            entity.Property(e => e.absoluteUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.innerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.outerHtml)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.rawLink)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<pageScrapeQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("pageScrapeQry");

            entity.Property(e => e.fileExt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.html).IsUnicode(false);
            entity.Property(e => e.pageAbsoluteUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.scrapeUri).IsUnicode(false);
            entity.Property(e => e.statusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<pageTbl>(entity =>
        {
            entity.Property(e => e.absoluteUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.addedDateTime).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.fileExt)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.path)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.query)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.scheme)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<scapeLinksThatShouldBeInPages>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("scapeLinksThatShouldBeInPages");

            entity.Property(e => e.absoluteUri)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<scrapeQueueQry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("scrapeQueueQry");

            entity.Property(e => e.absoluteUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.fileExt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.headStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.statusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<scrapeTbl>(entity =>
        {
            entity.HasIndex(e => e.id, "IX_scrapeTbl").IsUnique();

            entity.Property(e => e.absoluteUri)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.errorText)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.fileExt)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.headContentHeaders).IsUnicode(false);
            entity.Property(e => e.headContentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.headErrorMessage).IsUnicode(false);
            entity.Property(e => e.headResponseHeaders).IsUnicode(false);
            entity.Property(e => e.headStatusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.host)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.html).IsUnicode(false);
            entity.Property(e => e.statusCode)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}